{
  "contractName": "Counters",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/src/contracts/libraries/Counters.sol\":\"Counters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/src/contracts/libraries/Counters.sol\":{\"keccak256\":\"0xabdfe9cf68714fe2a5644a38fa21e9254d55fed79a8f63bf1eba9576a63ea226\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://82ef293f5e6679c5f86680a07324513977ce777a1e43188b3a5255d2137e9a67\",\"dweb:/ipfs/QmUMXCuPz8B8rEhGjdyx9Wgmtqj549pGkopAKmvxn4fboS\"]},\"project:/src/contracts/libraries/SafeMath.sol\":{\"keccak256\":\"0x52e31f01b146137ab460362581a10d9fa2cbfae95dfa81c35e994d19335b52b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0caec7ea122ce76a086f25588dfe94efe90fef703ead32b5f508333d4de56971\",\"dweb:/ipfs/QmUM2FCeYYfYCLVXZGnUMZENZkF3b9dgSKJfidH8ba18uS\"]}},\"version\":1}",
  "bytecode": "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e5b148404e4bd8f2f3d555dfd38619696b206c34a5caada85821a414ceb5e6a464736f6c634300080d0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e5b148404e4bd8f2f3d555dfd38619696b206c34a5caada85821a414ceb5e6a464736f6c634300080d0033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "670:693:11:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "670:693:11:-:0;;;;;;;;",
  "source": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\nimport './SafeMath.sol';\r\n\r\n/**\r\n * @title Counters\r\n * @author Matt Condon (@shrugs)\r\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\r\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\r\n *\r\n * Include with `using Counters for Counters.Counter;`\r\n * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\r\n * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\r\n * directly accessed.\r\n */\r\n\r\n library Counters {\r\n    using SafeMath for uint256; \r\n\r\n // build your own variable type with the keyword 'struct'\r\n\r\n// is a mechanism to keep track of our values of arithmetic changes\r\n// to our code \r\nstruct Counter {\r\n    uint256 _value;    \r\n}\r\n\r\n// we want to find the current value of a count \r\nfunction current(Counter storage counter ) internal view returns(uint256) {\r\n    return counter._value;\r\n} \r\n\r\n// funtion that always increments by 1 \r\nfunction increment(Counter storage counter) internal {\r\n    counter._value += 1;\r\n}\r\n\r\n// function that always decrement by 1 \r\nfunction decrement(Counter storage counter) internal {\r\n    counter._value = counter._value.sub(1);\r\n}\r\n\r\n\r\n\r\n}",
  "sourcePath": "D:\\Blockchain\\nft_marketplace_1\\src\\contracts\\libraries\\Counters.sol",
  "ast": {
    "absolutePath": "project:/src/contracts/libraries/Counters.sol",
    "exportedSymbols": {
      "Counters": [
        880
      ],
      "SafeMath": [
        1013
      ]
    },
    "id": 881,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 829,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:11"
      },
      {
        "absolutePath": "project:/src/contracts/libraries/SafeMath.sol",
        "file": "./SafeMath.sol",
        "id": 830,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 881,
        "sourceUnit": 1014,
        "src": "58:24:11",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Counters",
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 831,
          "nodeType": "StructuredDocumentation",
          "src": "86:579:11",
          "text": " @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`\n Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath\n overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n directly accessed."
        },
        "fullyImplemented": true,
        "id": 880,
        "linearizedBaseContracts": [
          880
        ],
        "name": "Counters",
        "nameLocation": "678:8:11",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "global": false,
            "id": 834,
            "libraryName": {
              "id": 832,
              "name": "SafeMath",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1013,
              "src": "700:8:11"
            },
            "nodeType": "UsingForDirective",
            "src": "694:27:11",
            "typeName": {
              "id": 833,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "713:7:11",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            }
          },
          {
            "canonicalName": "Counters.Counter",
            "id": 837,
            "members": [
              {
                "constant": false,
                "id": 836,
                "mutability": "mutable",
                "name": "_value",
                "nameLocation": "904:6:11",
                "nodeType": "VariableDeclaration",
                "scope": 837,
                "src": "896:14:11",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 835,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "896:7:11",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Counter",
            "nameLocation": "881:7:11",
            "nodeType": "StructDefinition",
            "scope": 880,
            "src": "874:44:11",
            "visibility": "public"
          },
          {
            "body": {
              "id": 848,
              "nodeType": "Block",
              "src": "1046:32:11",
              "statements": [
                {
                  "expression": {
                    "expression": {
                      "id": 845,
                      "name": "counter",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 840,
                      "src": "1060:7:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                        "typeString": "struct Counters.Counter storage pointer"
                      }
                    },
                    "id": 846,
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "memberName": "_value",
                    "nodeType": "MemberAccess",
                    "referencedDeclaration": 836,
                    "src": "1060:14:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 844,
                  "id": 847,
                  "nodeType": "Return",
                  "src": "1053:21:11"
                }
              ]
            },
            "id": 849,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "current",
            "nameLocation": "981:7:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 841,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 840,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "1005:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "989:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 839,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 838,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 837,
                      "src": "989:7:11"
                    },
                    "referencedDeclaration": 837,
                    "src": "989:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "988:26:11"
            },
            "returnParameters": {
              "id": 844,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 843,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 849,
                  "src": "1037:7:11",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 842,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "1037:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1036:9:11"
            },
            "scope": 880,
            "src": "972:106:11",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 861,
              "nodeType": "Block",
              "src": "1177:30:11",
              "statements": [
                {
                  "expression": {
                    "id": 859,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 855,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 852,
                        "src": "1184:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 857,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 836,
                      "src": "1184:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 858,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1202:1:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1184:19:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 860,
                  "nodeType": "ExpressionStatement",
                  "src": "1184:19:11"
                }
              ]
            },
            "id": 862,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "increment",
            "nameLocation": "1133:9:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 853,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 852,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "1159:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 862,
                  "src": "1143:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 851,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 850,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 837,
                      "src": "1143:7:11"
                    },
                    "referencedDeclaration": 837,
                    "src": "1143:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1142:25:11"
            },
            "returnParameters": {
              "id": 854,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1177:0:11"
            },
            "scope": 880,
            "src": "1124:83:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 878,
              "nodeType": "Block",
              "src": "1305:49:11",
              "statements": [
                {
                  "expression": {
                    "id": 876,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 868,
                        "name": "counter",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 865,
                        "src": "1312:7:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                          "typeString": "struct Counters.Counter storage pointer"
                        }
                      },
                      "id": 870,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "_value",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 836,
                      "src": "1312:14:11",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "hexValue": "31",
                          "id": 874,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1348:1:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          },
                          "value": "1"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_1_by_1",
                            "typeString": "int_const 1"
                          }
                        ],
                        "expression": {
                          "expression": {
                            "id": 871,
                            "name": "counter",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 865,
                            "src": "1329:7:11",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                              "typeString": "struct Counters.Counter storage pointer"
                            }
                          },
                          "id": 872,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_value",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 836,
                          "src": "1329:14:11",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 873,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sub",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 932,
                        "src": "1329:18:11",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                          "typeString": "function (uint256,uint256) pure returns (uint256)"
                        }
                      },
                      "id": 875,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1329:21:11",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1312:38:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 877,
                  "nodeType": "ExpressionStatement",
                  "src": "1312:38:11"
                }
              ]
            },
            "id": 879,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "decrement",
            "nameLocation": "1261:9:11",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 866,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 865,
                  "mutability": "mutable",
                  "name": "counter",
                  "nameLocation": "1287:7:11",
                  "nodeType": "VariableDeclaration",
                  "scope": 879,
                  "src": "1271:23:11",
                  "stateVariable": false,
                  "storageLocation": "storage",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                    "typeString": "struct Counters.Counter"
                  },
                  "typeName": {
                    "id": 864,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 863,
                      "name": "Counter",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 837,
                      "src": "1271:7:11"
                    },
                    "referencedDeclaration": 837,
                    "src": "1271:7:11",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Counter_$837_storage_ptr",
                      "typeString": "struct Counters.Counter"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1270:25:11"
            },
            "returnParameters": {
              "id": 867,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1305:0:11"
            },
            "scope": 880,
            "src": "1252:102:11",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 881,
        "src": "670:693:11",
        "usedErrors": []
      }
    ],
    "src": "33:1330:11"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.13+commit.abaa5c0e.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-08-23T11:38:06.622Z",
  "devdoc": {
    "author": "Matt Condon (@shrugs)",
    "details": "Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;` Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the SafeMath overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never directly accessed.",
    "kind": "dev",
    "methods": {},
    "title": "Counters",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}